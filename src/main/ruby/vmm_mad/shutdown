#!/usr/bin/env ruby

# -------------------------------------------------------------------------- #
# Copyright 2013, Terradue S.r.l.                                            #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

ONE_LOCATION=ENV["ONE_LOCATION"] if !defined?(ONE_LOCATION)

if !ONE_LOCATION
    RUBY_LIB_LOCATION="/usr/lib/one/ruby" if !defined?(RUBY_LIB_LOCATION)
else
    RUBY_LIB_LOCATION=ONE_LOCATION+"/lib/ruby" if !defined?(RUBY_LIB_LOCATION)
end

$: << RUBY_LIB_LOCATION
$: << File.dirname(__FILE__)

#------------------------------------------------------------------------------
# Wait the VM to shutdown TIMEOUT (xPOLL_INTERVAL) seconds.
# Set to ~10min
#------------------------------------------------------------------------------
POLL_INTERVAL=2
TIMEOUT=300

require 'jclouds_labs_driver'

internal_name = ARGV[0]
host      = ARGV[1]

jclouds_labs_drv = JCloudsLabsDriver.new(host)

jclouds_labs_drv.shutdown(internal_name)

count=0

regex = /STATE=(.*?)$/

while (jclouds_labs_drv.poll(internal_name).match(regex)[1] != 'd') do
	sleep POLL_INTERVAL
	if count > TIMEOUT then
	    OpenNebula.log_debug("Timeout reached and VM #{internal_name} is still alive.")
		exit -1
	end
	count+=POLL_INTERVAL	
end
